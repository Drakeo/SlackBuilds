From 89922c90824aeb6db5c0b7c062ee5828986bd11d Mon Sep 17 00:00:00 2001
From: "brian@tangent.org" <brian@tangent.org>
Date: Sun, 23 Jun 2019 17:31:15 -0700
Subject: [PATCH] Fix compiler warnings

---
 clients/memcapable.cc | 60 ++++++++++++++++++++++++++++---------------
 clients/utilities.cc  |  4 +--
 2 files changed, 41 insertions(+), 23 deletions(-)

diff --git a/clients/memcapable.cc b/clients/memcapable.cc
index 3e9bfabf..6a14d208 100644
--- a/clients/memcapable.cc
+++ b/clients/memcapable.cc
@@ -196,37 +196,55 @@ static memcached_socket_t connect_server(const char *hostname, const char *port)
   return sock;
 }
 
-static ssize_t timeout_io_op(memcached_socket_t fd, short direction, void *buf, size_t len)
+static ssize_t timeout_io_op_send(memcached_socket_t fd, const void *buf, size_t len)
 {
   ssize_t ret;
 
-  if (direction == POLLOUT)
-  {
-    ret= send(fd, buf, len, 0);
-  }
-  else
+  ret= send(fd, buf, len, 0);
+
+  if (ret == SOCKET_ERROR && get_socket_errno() == EWOULDBLOCK) 
   {
-    ret= recv(fd, buf, len, 0);
+    struct pollfd fds;
+    memset(&fds, 0, sizeof(struct pollfd));
+    fds.events= POLLOUT;
+    fds.fd= fd;
+
+    int err= poll(&fds, 1, timeout * 1000);
+    if (err == 1)
+    {
+      ret= send(fd, buf, len, 0);
+    }
+    else if (err == 0)
+    {
+      errno= ETIMEDOUT;
+    }
+    else
+    {
+      perror("Failed to poll");
+      return -1;
+    }
   }
 
+  return ret;
+}
+
+static ssize_t timeout_io_op_recv(memcached_socket_t fd, void *buf, size_t len)
+{
+  ssize_t ret;
+
+  ret= recv(fd, buf, len, 0);
+
   if (ret == SOCKET_ERROR && get_socket_errno() == EWOULDBLOCK) 
   {
     struct pollfd fds;
     memset(&fds, 0, sizeof(struct pollfd));
-    fds.events= direction;
+    fds.events= POLLIN;
     fds.fd= fd;
 
     int err= poll(&fds, 1, timeout * 1000);
     if (err == 1)
     {
-      if (direction == POLLOUT)
-      {
-        ret= send(fd, buf, len, 0);
-      }
-      else
-      {
-        ret= recv(fd, buf, len, 0);
-      }
+      ret= recv(fd, const_cast<void*>(buf), len, 0);
     }
     else if (err == 0)
     {
@@ -282,14 +300,14 @@ static enum test_return retry_write(const void* buf, size_t len)
   do
   {
     size_t num_bytes= len - offset;
-    ssize_t nw= timeout_io_op(sock, POLLOUT, (void*)(ptr + offset), num_bytes);
+    ssize_t nw= timeout_io_op_send(sock, ptr + offset, num_bytes);
     if (nw == -1)
     {
       verify(get_socket_errno() == EINTR || get_socket_errno() == EAGAIN);
     }
     else
     {
-      offset+= (size_t)nw;
+      offset+= static_cast<size_t>(nw);
     }
 
   } while (offset < len);
@@ -336,7 +354,7 @@ static enum test_return retry_read(void *buf, size_t len)
   size_t offset= 0;
   do
   {
-    ssize_t nr= timeout_io_op(sock, POLLIN, ((char*) buf) + offset, len - offset);
+    ssize_t nr= timeout_io_op_recv(sock, ((char*) buf) + offset, len - offset);
     switch (nr) {
     case -1 :
       fprintf(stderr, "Errno: %d %s\n", get_socket_errno(), strerror(errno));
@@ -662,7 +680,7 @@ static enum test_return test_binary_quit_impl(uint8_t cc)
   }
 
   /* Socket should be closed now, read should return EXIT_SUCCESS */
-  verify(timeout_io_op(sock, POLLIN, rsp.bytes, sizeof(rsp.bytes)) == 0);
+  verify(timeout_io_op_recv(sock, rsp.bytes, sizeof(rsp.bytes)) == 0);
 
   return TEST_PASS_RECONNECT;
 }
@@ -1271,7 +1289,7 @@ static enum test_return test_ascii_quit(void)
 
   /* Socket should be closed now, read should return EXIT_SUCCESS */
   char buffer[80];
-  verify(timeout_io_op(sock, POLLIN, buffer, sizeof(buffer)) == 0);
+  verify(timeout_io_op_recv(sock, buffer, sizeof(buffer)) == 0);
   return TEST_PASS_RECONNECT;
 
 }
diff --git a/clients/utilities.cc b/clients/utilities.cc
index 268b7904..5313da68 100644
--- a/clients/utilities.cc
+++ b/clients/utilities.cc
@@ -28,9 +28,9 @@ long int timedif(struct timeval a, struct timeval b)
 {
   long us, s;
 
-  us = (int)(a.tv_usec - b.tv_usec);
+  us = static_cast<int>(a.tv_usec - b.tv_usec);
   us /= 1000;
-  s = (int)(a.tv_sec - b.tv_sec);
+  s = static_cast<int>(a.tv_sec - b.tv_sec);
   s *= 1000;
   return s + us;
 }
